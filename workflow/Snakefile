import pathlib

configfile: "config/config.yaml"

if 'use_conda' in config and config['use_conda']:
    workflow.use_conda = True

# Verifiing inputs
## Make sure the referance path is a file
if not pathlib.Path(config["ref_dir"]).is_file():
    raise Exception("There is no file at the Referance genome directory")
## Input path should point to a directory
if not pathlib.Path(config["input_dir"]).is_dir():
    raise Exception("The input does not point to a directory")


CLADES = glob_wildcards(pathlib.Path(config["input_dir"])/"{clade}.fasta").clade
OUTPUT_DIR = pathlib.Path(config["output_dir"])
REF_DIR = pathlib.Path(config["ref_dir"])


rule all:
    input:
        OUTPUT_DIR/"nmask.fasta"

def get_clades(wildcards):
    return CLADES

rule clustalo_clades:
    input:
        get_clades
    output:
        OUTPUT_DIR/"msa/{clade}.fasta"
    threads: 2
    shell:
        "clustalo --thread {threads} -i {input} -o {output}"

rule consensus_gen:
    input:
        "example_data/msa/{clade}.fasta"
    output:
        OUTPUT_DIR/"consensus/{clade}.fasta"
    params:
        clade = "{clade}",
        threshold = config["consen_threshold"]
    conda:
        "envs/biopython.yaml"
    script:
        "scripts/consensus_gen.py"

# Combine the consen and the ref
rule combine_seq_ref:
    input:
        seq = OUTPUT_DIR/"consensus/{clade}.fasta",
        ref = REF_DIR
    output:
        OUTPUT_DIR/"combined/{clade}.fasta"
    shell:
        "cat {input.seq} {input.ref} > {output}"

# Align the consen and the referance
rule consen_ref_align: 
    input:
        OUTPUT_DIR/"combined/{clade}.fasta"
    output:
        OUTPUT_DIR/"seqref/{clade}.fasta"
    threads: 2
    shell:
        "clustalo --thread {threads} -i {input} -o {output}"

# Repairs the psuedo_genomes
rule repair_seq:
    input:
        OUTPUT_DIR/"seqref/{clade}.fasta"
    output:
        OUTPUT_DIR/"repaired/{clade}.fasta"
    params:
        seq_name = "{clade}"
    conda:
        "envs/biopython.yaml"
    script:
        "scripts/repair.py"
    
# Genrates the bedfiles
rule bed_gen:
    input:
        seq = OUTPUT_DIR/"repaired/{clade}.fasta",
        ref = REF_DIR
    output:
        OUTPUT_DIR/"bedfiles/{clade}.bed"
    conda:
        "envs/biopython.yaml"
    script:
        "scripts/bed_file_gen.py"

# Bed combiner 
rule bed_combiner:
    input:
        expand(OUTPUT_DIR/"bedfiles/{clade}.bed", clade=CLADES)
    output:
        OUTPUT_DIR/"combined.bed"
    script:
        "scripts/bed_file_cat.py"

# NMask Gen
rule nmask_gen:
    input: 
        bed_dir = OUTPUT_DIR/"combined.bed",
        ref_dir = REF_DIR
    output: 
        OUTPUT_DIR/"nmask.fasta"
    conda:
        "envs/biopython.yaml"
    script:
        "scripts/mask_gen.py"



