configfile: "config/config.yaml"

rule all:
    input:
        "example_data/nmask.fasta"
        

def get_clades(wildcards):
    return config["clades"][wildcards.clade]

rule clustalo_clades:
    input:
        get_clades
    output:
        "example_data/msa/{clade}.fasta"
    threads: 2
    shell:
        "clustalo --thread {threads} -i {input} -o {output}"

rule consensus_gen:
    input:
        "example_data/msa/{clade}.fasta"
    output:
        "example_data/consensus/{clade}.fasta"
    params:
        clade = "{clade}",
        threshold = config["consen_threshold"]
    conda:
        "envs/biopython.yaml"
    script:
        "scripts/consensus_gen.py"

# Combine the consen and the ref
rule combine_seq_ref:
    input:
        seq = "example_data/consensus/{clade}.fasta",
        ref = config["ref_geneome"]
    output:
        "example_data/combined/{clade}.fasta"
    shell:
        "cat {input.seq} {input.ref} > {output}"

# Align the consen and the referance
rule consen_ref_align: 
    input:
        "example_data/combined/{clade}.fasta"
    output:
        "example_data/seqref/{clade}.fasta"
    threads: 2
    shell:
        "clustalo --thread {threads} -i {input} -o {output}"

# Repairs the psuedo_genomes
rule repair_seq:
    input:
        "example_data/seqref/{clade}.fasta"
    output:
        "example_data/repaired/{clade}.fasta"
    params:
        seq_name = "{clade}"
    conda:
        "envs/biopython.yaml"
    script:
        "scripts/repair.py"
    
# Genrates the bedfiles
rule bed_gen:
    input:
        seq = "example_data/repaired/{clade}.fasta",
        ref = config["ref_geneome"]
    output:
        "example_data/bedfiles/{clade}.bed"
    conda:
        "envs/biopython.yaml"
    script:
        "scripts/bed_file_gen.py"

# Bed combiner 
rule bed_combiner:
    input:
        expand("example_data/bedfiles/{clade}.bed", clade=config["clades"])
    output:
        "example_data/combined.bed"
    script:
        "scripts/bed_file_cat.py"

# NMask Gen
rule nmask_gen:
    input: 
        bed = "example_data/combined.bed",
        ref = config["ref_geneome"]
    output: 
        "example_data/nmask.fasta"
    shell:
        "bedtools maskfasta -fi {input.ref} -bed {input.bed} -fo {output}"



